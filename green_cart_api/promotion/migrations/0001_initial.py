# Generated by Django 5.2.7 on 2025-10-03 10:21

import django.core.validators
import django.db.models.deletion
import django_extensions.db.fields
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('catalog', '0001_initial'),
        ('order', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Promotion',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, verbose_name='status')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this instance.', primary_key=True, serialize=False)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Optional extra metadata stored as JSON.', null=True)),
                ('name', models.CharField(help_text='Promotion name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Promotion description', null=True)),
                ('discount_type', models.CharField(choices=[('percentage', 'Percentage'), ('fixed_amount', 'Fixed Amount'), ('buy_x_get_y', 'Buy X Get Y'), ('free_shipping', 'Free Shipping')], default='percentage', help_text='Type of discount', max_length=20)),
                ('discount_value', models.DecimalField(decimal_places=2, help_text='Discount value (percentage or fixed amount)', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('scope', models.CharField(choices=[('all', 'All Products'), ('products', 'Specific Products'), ('categories', 'Product Categories'), ('brands', 'Product Brands')], default='all', help_text='Scope of the promotion', max_length=20)),
                ('minimum_purchase_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum purchase amount to qualify', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('minimum_quantity', models.PositiveIntegerField(blank=True, help_text='Minimum quantity to qualify', null=True)),
                ('maximum_discount_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum discount amount (for percentage discounts)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('usage_limit', models.PositiveIntegerField(blank=True, help_text='Maximum number of times this promotion can be used', null=True)),
                ('usage_count', models.PositiveIntegerField(default=0, help_text='Number of times this promotion has been used')),
                ('start_date', models.DateTimeField(help_text='Promotion start date and time')),
                ('end_date', models.DateTimeField(help_text='Promotion end date and time')),
                ('coupon_code', models.CharField(blank=True, help_text='Coupon code for the promotion', max_length=50, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the promotion is active')),
                ('brands', models.ManyToManyField(blank=True, help_text='Brands included in the promotion', related_name='promotions', to='catalog.brand')),
                ('categories', models.ManyToManyField(blank=True, help_text='Categories included in the promotion', related_name='promotions', to='catalog.category')),
                ('products', models.ManyToManyField(blank=True, help_text='Products included in the promotion', related_name='promotions', to='catalog.product')),
            ],
            options={
                'verbose_name': 'Promotion',
                'verbose_name_plural': 'Promotions',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='PromotionUsage',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, verbose_name='status')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this instance.', primary_key=True, serialize=False)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Optional extra metadata stored as JSON.', null=True)),
                ('discount_amount', models.DecimalField(decimal_places=2, help_text='Discount amount applied', max_digits=10)),
                ('order', models.ForeignKey(help_text='Order where promotion was used', on_delete=django.db.models.deletion.CASCADE, related_name='promotion_usages', to='order.order')),
                ('promotion', models.ForeignKey(help_text='Promotion used', on_delete=django.db.models.deletion.CASCADE, related_name='usages', to='promotion.promotion')),
            ],
            options={
                'verbose_name': 'Promotion Usage',
                'verbose_name_plural': 'Promotion Usages',
            },
        ),
    ]
