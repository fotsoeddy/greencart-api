# Generated by Django 5.2.7 on 2025-10-10 10:43

import django.core.validators
import django.db.models.deletion
import django_extensions.db.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('catalog', '0001_initial'),
        ('order', '0002_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Review',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this instance.', primary_key=True, serialize=False)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Optional extra metadata stored as JSON.', null=True)),
                ('rating', models.PositiveSmallIntegerField(help_text='Rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(help_text='Review title', max_length=255)),
                ('comment', models.TextField(help_text='Detailed review comment')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', help_text='Review status', max_length=20)),
                ('is_verified_purchase', models.BooleanField(default=False, help_text='Whether the reviewer purchased the product')),
                ('helpful_count', models.PositiveIntegerField(default=0, help_text='Number of users who found this review helpful')),
                ('order', models.ForeignKey(blank=True, help_text='Order associated with this review', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='order.order')),
                ('product', models.ForeignKey(help_text='Product being reviewed', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='catalog.product')),
                ('user', models.ForeignKey(help_text='User who wrote the review', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'ordering': ['-created'],
                'unique_together': {('product', 'user')},
            },
        ),
        migrations.CreateModel(
            name='ReviewImage',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, verbose_name='status')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this instance.', primary_key=True, serialize=False)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Optional extra metadata stored as JSON.', null=True)),
                ('image', models.ImageField(help_text='Review image', upload_to='review_images/')),
                ('alt_text', models.CharField(blank=True, help_text='Alternative text for accessibility', max_length=255, null=True)),
                ('review', models.ForeignKey(help_text='Parent review', on_delete=django.db.models.deletion.CASCADE, related_name='images', to='review.review')),
            ],
            options={
                'verbose_name': 'Review Image',
                'verbose_name_plural': 'Review Images',
            },
        ),
        migrations.CreateModel(
            name='ReviewHelpful',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, verbose_name='status')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this instance.', primary_key=True, serialize=False)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Optional extra metadata stored as JSON.', null=True)),
                ('review', models.ForeignKey(help_text='Review marked as helpful', on_delete=django.db.models.deletion.CASCADE, related_name='helpful_votes', to='review.review')),
                ('user', models.ForeignKey(help_text='User who found the review helpful', on_delete=django.db.models.deletion.CASCADE, related_name='helpful_votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Review Helpful',
                'verbose_name_plural': 'Review Helpful Votes',
                'unique_together': {('review', 'user')},
            },
        ),
    ]
