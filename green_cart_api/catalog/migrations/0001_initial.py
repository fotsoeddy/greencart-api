# Generated by Django 5.2.7 on 2025-10-03 10:21

import django.core.validators
import django.db.models.deletion
import django_extensions.db.fields
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, verbose_name='status')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this instance.', primary_key=True, serialize=False)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Optional extra metadata stored as JSON.', null=True)),
                ('name', models.CharField(help_text='Brand name', max_length=255, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly brand name', max_length=255, unique=True)),
                ('description', models.TextField(blank=True, help_text='Brand description', null=True)),
                ('logo', models.ImageField(blank=True, help_text='Brand logo', null=True, upload_to='brand_logos/')),
                ('website', models.URLField(blank=True, help_text='Brand website', null=True)),
            ],
            options={
                'verbose_name': 'Brand',
                'verbose_name_plural': 'Brands',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, verbose_name='status')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this instance.', primary_key=True, serialize=False)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Optional extra metadata stored as JSON.', null=True)),
                ('name', models.CharField(help_text='Tag name', max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly tag name', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Tag description', null=True)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, verbose_name='status')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this instance.', primary_key=True, serialize=False)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Optional extra metadata stored as JSON.', null=True)),
                ('name', models.CharField(help_text='Category name', max_length=255)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of the category name', max_length=255, unique=True)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the category', null=True)),
                ('image', models.ImageField(blank=True, help_text='Category image', null=True, upload_to='category_images/')),
                ('display_order', models.PositiveIntegerField(default=0, help_text='Order in which categories are displayed')),
                ('is_featured', models.BooleanField(default=False, help_text='Whether this category is featured on the homepage')),
                ('parent', models.ForeignKey(blank=True, help_text='Parent category for hierarchical structure', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='catalog.category')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, verbose_name='status')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this instance.', primary_key=True, serialize=False)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Optional extra metadata stored as JSON.', null=True)),
                ('name', models.CharField(help_text='Product name', max_length=255)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of the product name', max_length=255, unique=True)),
                ('description', models.TextField(help_text='Detailed product description')),
                ('short_description', models.TextField(blank=True, help_text='Brief product description for listings', max_length=500, null=True)),
                ('price', models.DecimalField(decimal_places=2, help_text='Current selling price', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('compare_price', models.DecimalField(blank=True, decimal_places=2, help_text='Original price for showing discounts', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, help_text='Cost price for profit calculation', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('quantity', models.PositiveIntegerField(default=0, help_text='Current stock quantity')),
                ('low_stock_threshold', models.PositiveIntegerField(default=5, help_text='Alert when stock reaches this level')),
                ('track_quantity', models.BooleanField(default=True, help_text='Whether to track inventory for this product')),
                ('allow_backorders', models.BooleanField(default=False, help_text='Allow orders when out of stock')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Product weight in kilograms', max_digits=8, null=True)),
                ('dimensions', models.CharField(blank=True, help_text='Product dimensions (LxWxH)', max_length=100, null=True)),
                ('meta_title', models.CharField(blank=True, help_text='SEO meta title', max_length=255, null=True)),
                ('meta_description', models.TextField(blank=True, help_text='SEO meta description', null=True)),
                ('is_featured', models.BooleanField(default=False, help_text='Featured product display')),
                ('is_bestseller', models.BooleanField(default=False, help_text='Mark as bestseller')),
                ('is_new', models.BooleanField(default=False, help_text='Mark as new product')),
                ('brand', models.ForeignKey(blank=True, help_text='Product brand', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='catalog.brand')),
                ('categories', models.ManyToManyField(help_text='Categories this product belongs to', related_name='products', to='catalog.category')),
                ('tags', models.ManyToManyField(blank=True, help_text='Product tags', related_name='products', to='catalog.tag')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['-created', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, verbose_name='status')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this instance.', primary_key=True, serialize=False)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Optional extra metadata stored as JSON.', null=True)),
                ('image', models.ImageField(help_text='Product image', upload_to='product_images/')),
                ('alt_text', models.CharField(blank=True, help_text='Alternative text for accessibility', max_length=255, null=True)),
                ('is_primary', models.BooleanField(default=False, help_text='Set as primary product image')),
                ('display_order', models.PositiveIntegerField(default=0, help_text='Order in which images are displayed')),
                ('product', models.ForeignKey(help_text='Product these images belong to', on_delete=django.db.models.deletion.CASCADE, related_name='images', to='catalog.product')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'ordering': ['is_primary', 'display_order', 'created'],
            },
        ),
    ]
