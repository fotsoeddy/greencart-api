# Generated by Django 5.2.7 on 2025-10-03 10:21

import django.core.validators
import django_extensions.db.fields
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this instance.', primary_key=True, serialize=False)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Optional extra metadata stored as JSON.', null=True)),
                ('order_number', models.CharField(help_text='Unique order identifier', max_length=20, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('processing', 'Processing'), ('shipped', 'Shipped'), ('delivered', 'Delivered'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], default='pending', help_text='Order status', max_length=20)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', help_text='Payment status', max_length=20)),
                ('subtotal', models.DecimalField(decimal_places=2, help_text='Subtotal before discounts and tax', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total discount amount', max_digits=10)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Tax amount', max_digits=10)),
                ('shipping_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Shipping cost', max_digits=10)),
                ('total', models.DecimalField(decimal_places=2, help_text='Final total amount', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('billing_address_same', models.BooleanField(default=True, help_text='Whether billing address is same as shipping address')),
                ('billing_address', models.JSONField(blank=True, help_text='Billing address details (if different from shipping)', null=True)),
                ('customer_note', models.TextField(blank=True, help_text='Customer notes or special instructions', null=True)),
                ('tracking_number', models.CharField(blank=True, help_text='Shipping tracking number', max_length=100, null=True)),
                ('shipping_method', models.CharField(blank=True, help_text='Shipping method', max_length=100, null=True)),
                ('estimated_delivery', models.DateField(blank=True, help_text='Estimated delivery date', null=True)),
                ('paid_at', models.DateTimeField(blank=True, help_text='When payment was completed', null=True)),
                ('shipped_at', models.DateTimeField(blank=True, help_text='When order was shipped', null=True)),
                ('delivered_at', models.DateTimeField(blank=True, help_text='When order was delivered', null=True)),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, verbose_name='status')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this instance.', primary_key=True, serialize=False)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Optional extra metadata stored as JSON.', null=True)),
                ('quantity', models.PositiveIntegerField(help_text='Quantity ordered', validators=[django.core.validators.MinValueValidator(1)])),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit at time of order', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_price', models.DecimalField(decimal_places=2, help_text='Total price for this line item', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
            ],
            options={
                'verbose_name': 'Order Item',
                'verbose_name_plural': 'Order Items',
                'ordering': ['created'],
            },
        ),
    ]
